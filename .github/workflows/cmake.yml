name: CMake

on:
  push:
    branches: [ "master" ]
    paths-ignore:
      - 'README.MD'
      - 'LICENSE.MD'
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true #arm toolchain has to be added to PATH, considered unsecure

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Install Arm GNU Toolchain (arm-none-eabi-gcc)
      uses: carlosperate/arm-none-eabi-gcc-action@v1
      with:
        path-env-var: ARM_NONE_EABI_GCC_PATH
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -D CMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -D EXTRAPATH={{env.ARM_NONE_EABI_GCC_PATH}}  -S ${{github.workspace}}

    - name: Build
      # Build your program with the given configuration --config ${{env.BUILD_TYPE}}
      run: cmake --build ${{github.workspace}}/build --target all -- -j 9



